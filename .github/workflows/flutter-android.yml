# File: .github/workflows/flutter-android.yml
# Purpose: Uses raw Gradle call to bypass Flutter wrapper and diagnose CI failures
# ----------------------------------------------------------------------------------
# CHANGELOG:
# [2025-05-06] Initial build attempts.
# [2025-05-06] Removed custom checkout path to avoid double-folder nesting.
# [2025-05-06] Set working-directory to midrange_ops_hub (later determined incorrect).
# [2025-05-07] ✅ Reset: no checkout path, no working-directory override — runs from root.
# [2025-05-07] 🛠 Final fix: Removed working-directory to build from repo root.
# [2025-05-07] 🧠 Added Gradle cache steps to optimize CI performance.
# [2025-05-07] 📦 Enabled verbose build logging for better error diagnosis.
# [2025-05-07] 🔧 Added Java setup and flutter clean steps for build reliability.
# [2025-05-07] 🧯 Attempted explicit checkout path + matching working-directory.
# [2025-05-07] 🔁 Reset to clean root context — no path, no working-dir.
# [2025-05-07] 🚀 Tried checkout path 'midrange_ops_hub' with matching working-directory.
# [2025-05-07] 🔍 Simplified to non-nested checkout with path '.' and working-directory '.'.
# [2025-05-07] 📜 Refined debugging, confirmed build.gradle.kts compatibility.
# [2025-05-07] ✅ Bypassed runner nesting with custom checkout path.
# [2025-05-07] 🔧 Confirmed MainActivity.kt, AndroidManifest.xml, Gradle & pubspec are clean.
# [2025-05-07] 💥 Switched to raw Gradle build using ./gradlew for better control and logging.
# [2025-05-07] 📎 Added git-tracked Gradle wrapper support (./gradlew) for consistent CI builds.

name: Build Flutter APK via Gradle

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Pull source code from repo
      - name: Checkout source
        uses: actions/checkout@v3

      # Step 2: Print directory layout for troubleshooting
      - name: Show directory structure
        run: |
          echo "📁 Root:"
          pwd
          ls -al
          echo "📁 android/:"
          ls -al android

      # Step 3: Install JDK required for Gradle
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      # Step 4: Install specific Flutter version
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.0'

      # Step 5: Print Flutter environment
      - name: flutter doctor
        run: flutter doctor -v

      # Step 6: Accept any pending SDK licenses
      - name: Accept Android SDK Licenses
        run: yes | flutter doctor --android-licenses

      # Step 7: Clean old builds
      - name: Clean build folders
        run: flutter clean

      # Step 8: Resolve pubspec dependencies
      - name: Install dependencies
        run: flutter pub get

      # Step 9: Use local Gradle wrapper to build APK
      - name: Run Gradle Build (debug)
        working-directory: android
        run: |
          chmod +x ./gradlew
          ./gradlew assembleDebug --stacktrace --info

      # Step 10: Publish APK as GitHub artifact
      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: MidRangeOpsHub-debug-apk
          path: android/app/build/outputs/apk/debug/app-debug.apk